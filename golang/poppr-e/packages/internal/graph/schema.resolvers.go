package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.45

import (
	"context"

	"github.com/ffimnsr/poppr-internal/graph/model"
)

// Countries is the resolver for the countries field.
func (r *queryResolver) Countries(ctx context.Context) ([]*model.Country, error) {
	var countries []*model.Country
	err := r.DB.Find(&countries).Error
	if err != nil {
		return nil, err
	}
	return countries, nil
}

// Regions is the resolver for the regions field.
func (r *queryResolver) Regions(ctx context.Context) ([]*model.Region, error) {
	var regions []*model.Region
	err := r.DB.Find(&regions).Error
	if err != nil {
		return nil, err
	}
	return regions, nil
}

// Provinces is the resolver for the provinces field.
func (r *queryResolver) Provinces(ctx context.Context) ([]*model.Province, error) {
	var provinces []*model.Province
	err := r.DB.Find(&provinces).Error
	if err != nil {
		return nil, err
	}
	return provinces, nil
}

// CityMunicipalities is the resolver for the cityMunicipalities field.
func (r *queryResolver) CityMunicipalities(ctx context.Context) ([]*model.CityMunicipality, error) {
	var cityMunicipalities []*model.CityMunicipality
	err := r.DB.Find(&cityMunicipalities).Error
	if err != nil {
		return nil, err
	}
	return cityMunicipalities, nil
}

// GlobalRoles is the resolver for the globalRoles field.
func (r *queryResolver) GlobalRoles(ctx context.Context) ([]*model.GlobalRole, error) {
	var globalRoles []*model.GlobalRole
	err := r.DB.Find(&globalRoles).Error
	if err != nil {
		return nil, err
	}
	return globalRoles, nil
}

// Country is the resolver for the country field.
func (r *queryResolver) Country(ctx context.Context, id int) (*model.Country, error) {
	var country *model.Country
	err := r.DB.First(&country, id).Error
	if err != nil {
		return nil, err
	}
	return country, nil
}

// Region is the resolver for the region field.
func (r *queryResolver) Region(ctx context.Context, id int) (*model.Region, error) {
	var region *model.Region
	err := r.DB.First(&region, id).Error
	if err != nil {
		return nil, err
	}
	return region, nil
}

// Province is the resolver for the province field.
func (r *queryResolver) Province(ctx context.Context, id int) (*model.Province, error) {
	var province *model.Province
	err := r.DB.First(&province, id).Error
	if err != nil {
		return nil, err
	}
	return province, nil
}

// CityMunicipality is the resolver for the cityMunicipality field.
func (r *queryResolver) CityMunicipality(ctx context.Context, id int) (*model.CityMunicipality, error) {
	var cityMunicipality *model.CityMunicipality
	err := r.DB.First(&cityMunicipality, id).Error
	if err != nil {
		return nil, err
	}
	return cityMunicipality, nil
}

// GlobalRole is the resolver for the globalRole field.
func (r *queryResolver) GlobalRole(ctx context.Context, id int) (*model.GlobalRole, error) {
	var globalRole *model.GlobalRole
	err := r.DB.First(&globalRole, id).Error
	if err != nil {
		return nil, err
	}
	return globalRole, nil
}

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type queryResolver struct{ *Resolver }
